package pl.edu.pw.mini.cadcam.pusn.controller;

import com.hermant.swing.WindowBuilder;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.joml.Quaternionf;
import org.joml.Vector3f;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.function.Consumer;

import static com.jogamp.opengl.math.FloatUtil.PI;

public class RotationController {
    private JPanel mainPane;
    private JSpinner xAngleSpinner;
    private JSpinner yAngleSpinner;
    private JSpinner zAngleSpinner;
    private JSpinner xQuaternionSpinner;
    private JSpinner yQuaternionSpinner;
    private JSpinner zQuaternionSpinner;
    private JSpinner wQuaternionSpinner;
    private JButton applyAnglesButton;
    private JButton applyQuaternionButton;
    private JButton okButton;
    private JButton cancelButton;
    private JLabel rotationLabel;

    private final Vector3f rotation = new Vector3f();

    public RotationController(Consumer<Vector3f> getResult, Consumer<String> getText) {
        $$$setupUI$$$();
        xAngleSpinner.setModel(new SpinnerNumberModel(0f, -360f, 360f, 15f));
        yAngleSpinner.setModel(new SpinnerNumberModel(0f, -360f, 360f, 15f));
        zAngleSpinner.setModel(new SpinnerNumberModel(0f, -360f, 360f, 15f));
        xQuaternionSpinner.setModel(new SpinnerNumberModel(0f, -10f, 10f, 0.01f));
        yQuaternionSpinner.setModel(new SpinnerNumberModel(0f, -10f, 10f, 0.01f));
        zQuaternionSpinner.setModel(new SpinnerNumberModel(0f, -10f, 10f, 0.01f));
        wQuaternionSpinner.setModel(new SpinnerNumberModel(0f, -10f, 10f, 0.01f));
        applyAnglesButton.addActionListener(e -> {
            rotation.set(
                    ((Number) xAngleSpinner.getValue()).floatValue(),
                    ((Number) yAngleSpinner.getValue()).floatValue(),
                    ((Number) zAngleSpinner.getValue()).floatValue());
            rotationLabel.setText("[%.2f, %.2f, %.2f]".formatted(rotation.x, rotation.y, rotation.z));
            rotation.mul(PI / 180);
            Quaternionf quaternion = new Quaternionf().rotateXYZ(rotation.x, rotation.y, rotation.z);
            xQuaternionSpinner.setValue(quaternion.x);
            yQuaternionSpinner.setValue(quaternion.y);
            zQuaternionSpinner.setValue(quaternion.z);
            wQuaternionSpinner.setValue(quaternion.w);
        });
        applyQuaternionButton.addActionListener(e -> {
            Quaternionf quaternion = new Quaternionf(
                    ((Number) xQuaternionSpinner.getValue()).floatValue(),
                    ((Number) yQuaternionSpinner.getValue()).floatValue(),
                    ((Number) zQuaternionSpinner.getValue()).floatValue(),
                    ((Number) wQuaternionSpinner.getValue()).floatValue()).normalize();
            xQuaternionSpinner.setValue(quaternion.x);
            yQuaternionSpinner.setValue(quaternion.y);
            zQuaternionSpinner.setValue(quaternion.z);
            wQuaternionSpinner.setValue(quaternion.w);
            quaternion.getEulerAnglesXYZ(rotation);
            rotationLabel.setText("[%.2f, %.2f, %.2f]".formatted(rotation.x * 180 / PI, rotation.y * 180 / PI, rotation.z * 180 / PI));
            xAngleSpinner.setValue(rotation.x * 180 / PI);
            yAngleSpinner.setValue(rotation.y * 180 / PI);
            zAngleSpinner.setValue(rotation.z * 180 / PI);
        });
        Dialog dialog = new WindowBuilder()
                .setContentPane(mainPane)
                .buildDialog();
        okButton.addActionListener(e -> {
            if (getResult != null) getResult.accept(rotation);
            if (getText != null) getText.accept("[%.2f, %.2f, %.2f]".formatted(rotation.x * 180 / PI, rotation.y * 180 / PI, rotation.z * 180 / PI));
            dialog.dispose();
        });
        cancelButton.addActionListener(e -> dialog.dispose());
    }

    public Vector3f getRotation() {
        return rotation;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(13, 2, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("euler angles");
        mainPane.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("x");
        mainPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xAngleSpinner = new JSpinner();
        mainPane.add(xAngleSpinner, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("y");
        mainPane.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("z");
        mainPane.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        applyAnglesButton = new JButton();
        applyAnglesButton.setText("Apply angles");
        mainPane.add(applyAnglesButton, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yAngleSpinner = new JSpinner();
        mainPane.add(yAngleSpinner, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zAngleSpinner = new JSpinner();
        mainPane.add(zAngleSpinner, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("quaternion");
        mainPane.add(label5, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("x");
        mainPane.add(label6, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("y");
        mainPane.add(label7, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("z");
        mainPane.add(label8, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("w");
        mainPane.add(label9, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xQuaternionSpinner = new JSpinner();
        mainPane.add(xQuaternionSpinner, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yQuaternionSpinner = new JSpinner();
        mainPane.add(yQuaternionSpinner, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zQuaternionSpinner = new JSpinner();
        mainPane.add(zQuaternionSpinner, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        wQuaternionSpinner = new JSpinner();
        mainPane.add(wQuaternionSpinner, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        applyQuaternionButton = new JButton();
        applyQuaternionButton.setText("Apply quaternion");
        mainPane.add(applyQuaternionButton, new GridConstraints(10, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new GridConstraints(12, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        okButton = new JButton();
        okButton.setText("Ok");
        panel1.add(okButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel1.add(cancelButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rotationLabel = new JLabel();
        rotationLabel.setText("[0, 0, 0]");
        mainPane.add(rotationLabel, new GridConstraints(11, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
