package pl.edu.pw.mini.cadcam.pusn.controller;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.joml.Vector3f;
import pl.edu.pw.mini.cadcam.pusn.graphics.Interpolation;
import pl.edu.pw.mini.cadcam.pusn.model.Table;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import static com.jogamp.opengl.math.FloatUtil.PI;

public class InterpolationController {
    private JButton applyParams;
    private JPanel mainPane;
    private JSpinner p2Spinner;
    private JSpinner p1Spinner;
    private JSpinner l4Spinner;
    private JSpinner l3Spinner;
    private JSpinner l2Spinner;
    private JSpinner l1Spinner;

    public InterpolationController(Consumer<Table.Params> setParams) {
        $$$setupUI$$$();
        l1Spinner.setModel(new SpinnerNumberModel(1, 0.01, 10, 0.01));
        l2Spinner.setModel(new SpinnerNumberModel(1, 0.01, 10, 0.01));
        l3Spinner.setModel(new SpinnerNumberModel(1, 0.01, 10, 0.01));
        l4Spinner.setModel(new SpinnerNumberModel(1, 0.01, 10, 0.01));
        p1Spinner.setModel(new SpinnerNumberModel(0, 0, 360, 5.0));
        p2Spinner.setModel(new SpinnerNumberModel(0, 0, 360, 5.0));
        l1Spinner.addChangeListener(e -> applyParams.doClick());
        l2Spinner.addChangeListener(e -> applyParams.doClick());
        l3Spinner.addChangeListener(e -> applyParams.doClick());
        l4Spinner.addChangeListener(e -> applyParams.doClick());
        p1Spinner.addChangeListener(e -> applyParams.doClick());
        p2Spinner.addChangeListener(e -> applyParams.doClick());
        applyParams.addActionListener(e -> {
            if (setParams != null) {
                Table.Params params = new Table.Params();
                params.l1 = ((Number) l1Spinner.getValue()).doubleValue();
                params.l2 = ((Number) l2Spinner.getValue()).doubleValue();
                params.l3 = ((Number) l3Spinner.getValue()).doubleValue();
                params.l4 = ((Number) l4Spinner.getValue()).doubleValue();
                params.p1 = Math.toRadians(((Number) p1Spinner.getValue()).doubleValue());
                params.p2 = Math.toRadians(((Number) p2Spinner.getValue()).doubleValue());
                setParams.accept(params);
            }
        });
    }

    public Container getMainPane() {
        return mainPane;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        mainPane.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        applyParams = new JButton();
        applyParams.setText("Apply");
        mainPane.add(applyParams, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "params", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setText("l1");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("l2");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("l3");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("l4");
        panel1.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("p1");
        panel1.add(label5, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("p2");
        panel1.add(label6, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        p2Spinner = new JSpinner();
        panel1.add(p2Spinner, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        p1Spinner = new JSpinner();
        panel1.add(p1Spinner, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        l4Spinner = new JSpinner();
        panel1.add(l4Spinner, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        l3Spinner = new JSpinner();
        panel1.add(l3Spinner, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        l2Spinner = new JSpinner();
        panel1.add(l2Spinner, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        l1Spinner = new JSpinner();
        panel1.add(l1Spinner, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
